#_*_coding:utf8_*_
from django.contrib import admin

# Register your models here.

from django import forms
from django.contrib import admin
from django.contrib.auth.models import Group
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.forms import ReadOnlyPasswordHashField
from assets import models
from tasks.models import Task

from django.contrib.auth import  forms as auth_form

from smtp import sendmail


class UserCreationForm(forms.ModelForm):
    """A form for creating new users. Includes all the required
    fields, plus a repeated password."""
    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)
    password2 = forms.CharField(label='Password confirmation', widget=forms.PasswordInput)

    class Meta:
        model = models.UserProfile
        fields = ('email','token')

    def clean_password2(self):
        # Check that the two password entries match
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("Passwords don't match")
        return password2

    def save(self, commit=True):
        # Save the provided password in hashed format
        user = super(UserCreationForm, self).save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user


class UserChangeForm(forms.ModelForm):
    """A form for updating users. Includes all the fields on
    the user, but replaces the password field with admin's
    password hash display field.
    """
    password = ReadOnlyPasswordHashField(label="Password",
        help_text=("Raw passwords are not stored, so there is no way to see "
                    "this user's password, but you can change the password "
                    "using <a href=\"password/\">this form</a>."))

    class Meta:
        model = models.UserProfile
        fields = ('email', 'password','is_active', 'is_admin')

    def clean_password(self):
        # Regardless of what the user provides, return the initial value.
        # This is done here, rather than on the field, because the
        # field does not have access to the initial value
        return self.initial["password"]


class UserProfileAdmin(UserAdmin):
    # The forms to add and change user instances
    form = UserChangeForm
    add_form = UserCreationForm

    # The fields to be used in displaying the User model.
    # These override the definitions on the base UserAdmin
    # that reference specific fields on auth.User.
    list_display = ('id','email','is_admin','is_active')
    list_filter = ('is_admin',)
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Personal info', {'fields': ('department','tel','mobile','memo')}),
        ('API TOKEN info', {'fields': ('token',)}),
        ('Permissions', {'fields': ('is_active','is_admin')}),
        ('账户有效期', {'fields': ('valid_begin_time','valid_end_time')}),
    )
    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin
    # overrides get_fieldsets to use this attribute when creating a user.
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email',  'password1', 'password2','is_active','is_admin')}
        ),
    )
    search_fields = ('email',)
    ordering = ('email',)
    filter_horizontal = ()

class ServerInline(admin.TabularInline):
    model = models.Server
    exclude = ('memo',)
    #readonly_fields = ['create_date']

class CPUInline(admin.TabularInline):
    model = models.CPU
    exclude = ('memo',)
    readonly_fields = ['create_date']
class NICInline(admin.TabularInline):
    model = models.NIC
    exclude = ('memo',)
    readonly_fields = ['create_date']
class RAMInline(admin.TabularInline):
    model = models.RAM
    exclude = ('memo',)
    readonly_fields = ['create_date']
class DiskInline(admin.TabularInline):
    model = models.Disk
    exclude = ('memo',)
    readonly_fields = ['create_date']

class AssetAdmin(admin.ModelAdmin):
    list_display = ('id','asset_type','sn','name','manufactory','management_ip','idc','business_unit','admin','trade_date','status')
    inlines = [ServerInline,CPUInline,RAMInline,DiskInline,NICInline]
    search_fields = ['sn',]
    list_filter = ['idc','manufactory','business_unit','asset_type']
    choice_fields = ('asset_type','status')
    fk_fields = ('manufactory','idc','business_unit','admin')
    list_per_page = 10
    list_filter = ('asset_type','status','manufactory','idc','business_unit','admin','trade_date')
    dynamic_fk = 'asset_type'
    dynamic_list_display = ('model','sub_asset_type','os_type','os_distribution')
    dynamic_choice_fields = ('sub_asset_type',)
    m2m_fields = ('tags',)

class NicAdmin(admin.ModelAdmin):
    list_display = ('name','macaddress','ipaddress','netmask','bonding')
    search_fields = ('macaddress','ipaddress')


class EventLogAdmin(admin.ModelAdmin):
    list_display = ('name','colored_event_type','asset','component','detail','date','user')
    search_fields = ('asset',)
    list_filter = ('event_type','component','date','user')

class TaskAdmin(admin.ModelAdmin):
    list_display = ('sn','time','serviceman','dpartment','responsibleman','dpartment1','task','taskman','tasktime','issue_des','issue_solve','feedback','leaderview','review')
    list_filter = ['sn','time','dpartment','taskman']
    search_fields = ['sn',]
    choice_fields = ('sn','time')
    fk_fields = ('sn','time','taskman','task')
    list_per_page = 10
    list_filter = ['sn','time','dpartment','taskman','task','review']
    dynamic_fk = 'sn'
    dynamic_choice_fields = ('sn',)
    actions = ['approve_selected_objects']
    def approve_selected_objects(modeladmin, request, queryset):
        selected = request.POST.getlist(admin.ACTION_CHECKBOX_NAME)
	list1 = []
	for i in range(len(selected)):
	    obj = Task.objects.get(id=int(selected[i]))
	    obj.review = '已审核' 
	    obj.save()
	    send = obj.sn + " "+ str(obj.time) + " "+ obj.serviceman + " "+ obj.dpartment + " "+ obj.responseman + " "+obj.dpartment1 + " "+ obj.task + " "+ obj.taskman + " "+ str(obj.tasktime) + " "+ obj.issue_des + " "+ obj.issue_solve + " "+ obj.review 

#    sn = models.CharField('编号',max_length=50)
#    time = models.DateField(u'工单日期',null=True, blank=True)
#    serviceman = models.CharField('服务对象',max_length=50)
#    dpartment = models.CharField('所属部门',max_length=50)
#    dpartment_type_choices = (
#        ('tech', u'技术研发部'),
#        ('admin', u'人资行政部'),
#        ('finance', u'计划财务部'),
#        ('operation', u'运营支持部'),
#        ('risk', u'风险控制部'),
#        ('bank', u'金融服务部'),
#        ('cross', u'跨境支付项目组'),
#        ('move', u'移动支付项目组'),
#        ('net', u'网络支付部'),
#        ('others', u'其它部门'),
#    )
#    dpartment = models.CharField('所属部门',choices=dpartment_type_choices,max_length=64, default='tech')
#    responsibleman = models.CharField('工作负责人',max_length=50)
#    dpartment1 = models.CharField('所属部门',choices=dpartment_type_choices,max_length=64, default='tech')
#    task = models.CharField('工作任务',max_length=200)
#    taskman = models.CharField('工作任务签发人',max_length=50)
#    tasktime = models.DateField(u'签发时间',null=True, blank=True)
#    issue_des = models.CharField('故障问题描述',max_length=200)
#    issue_solve = models.CharField('故障解决情况',max_length=50)
#    feedback = models.CharField('服务反馈意见',max_length=50)
#    leaderview = models.CharField('领导意见',max_length=50)
#    review
#
	    print send
	    print obj.review
	    print ("obj",obj) 
	sendmail()
    approve_selected_objects.short_description = "审核所选的 故障表"




from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponseRedirect




class NewAssetApprovalZoneAdmin(admin.ModelAdmin):
    list_display = ('sn','asset_type','manufactory','model','cpu_model','cpu_count','cpu_core_count','ram_size','os_distribution','os_release','date','approved','approved_by','approved_date')
    actions = ['approve_selected_objects']
    def approve_selected_objects(modeladmin, request, queryset):
        selected = request.POST.getlist(admin.ACTION_CHECKBOX_NAME)
        ct = ContentType.objects.get_for_model(queryset.model)
        return HttpResponseRedirect("/asset/new_assets/approval/?ct=%s&ids=%s" % (ct.pk, ",".join(selected)))
    approve_selected_objects.short_description = "批准入库"

# Now register the new UserAdmin...
admin.site.register(models.UserProfile, UserProfileAdmin)
# ... and, since we're not using Django's built-in permissions,
# unregister the Group model from admin.
#admin.site.unregister(Group)
admin.site.register(models.Asset,AssetAdmin)
admin.site.register(models.Server)
admin.site.register(models.NetworkDevice)
admin.site.register(models.IDC)
admin.site.register(models.BusinessUnit)
admin.site.register(models.Contract)
admin.site.register(models.CPU)
admin.site.register(models.Disk)
admin.site.register(models.NIC,NicAdmin)
admin.site.register(models.RAM)
admin.site.register(models.Manufactory)
admin.site.register(models.Tag)
admin.site.register(models.Software)
admin.site.register(models.EventLog,EventLogAdmin)
admin.site.register(models.NewAssetApprovalZone,NewAssetApprovalZoneAdmin)
admin.site.register(Task,TaskAdmin)
#admin.site.register(models.Task,TaskAdmin)
